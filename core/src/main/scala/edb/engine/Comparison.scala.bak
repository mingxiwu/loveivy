package edb.engine

import edb.catalog._

import spark.SparkContext
import SparkContext._
import spark.{RDD}

import scala.reflect.BeanProperty

/*
 * Boolean Comparison Operator (from predicate) 
 *
 * Note: This is not rdbms physical operator. 
 * Predicate = Source <op> Target
 * <op> supports "=", "<>", "<", 
 * ">", "<=", ">="
 *
 */
sealed abstract class Operator

//=
case class EQUAL extends Operator
// <>
case class NOTEQUAL extends Operator
// <
case class LESS extends Operator
// >
case class GREATER extends Operator
//<=
case class LE extends Operator
//>=
case class GE extends Operator 


/** 
 * source can be R or S
 * R <op> S
 */
sealed abstract class Source
case class RelationR extends Source
case class RelationS extends Source

/**
 * target can be other, same, or
 * given (constant)
 */
sealed abstract class Target
case class SameRelation extends Target
case class OtherRelation extends Target
case class Given extends Target

/**
 * Use case class for Builder Pattern, and copy()
 * method
 * 
 * @param source   
 * @param target  
 * @param firstAtt 
 * @param secondAtt 
 * @param compValue 
 * @param op 
 *
 */
case class Comparison 
 (@BeanProperty var source: Source = new RelationR,
  @BeanProperty var target: Target = new OtherRelation, 
  @BeanProperty var firstAtt: Int = 0, 
  @BeanProperty var secondAtt: Int = 0, 
  @BeanProperty var compValue: genericValue, 
  @BeanProperty var op: Operator)
   
   
   


